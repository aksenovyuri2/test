generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  achievements  UserAchievement[]
  alerts        MetricAlert[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String           @id @default(cuid())
  title       String
  description String
  icon        String
  userAchievements UserAchievement[]
}

model UserAchievement {
  id           String      @id @default(cuid())
  userId       String
  achievementId String
  unlockedAt   DateTime    @default(now())
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement  Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Metric {
  id          String       @id @default(cuid())
  name        String
  category    String
  data        MetricData[]
  alerts      MetricAlert[]
}

model MetricData {
  id        String   @id @default(cuid())
  metricId  String
  value     Float
  date      DateTime
  metric    Metric   @relation(fields: [metricId], references: [id], onDelete: Cascade)
}

model MetricAlert {
  id        String   @id @default(cuid())
  userId    String
  metricId  String
  message   String
  severity  String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  metric    Metric   @relation(fields: [metricId], references: [id], onDelete: Cascade)
} 